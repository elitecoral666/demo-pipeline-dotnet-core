# This workflow will build a .NET Core project and deploy it to an Azure Functions App on Windows or Linux when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure Functions app.
# For instructions see https://learn.microsoft.com/en-us/azure/azure-functions/create-first-function-vs-code-csharp?tabs=in-process
#
# To configure this workflow:
# 1. Set up the following secrets in your repository:
#   - AZURE_FUNCTIONAPP_PUBLISH_PROFILE
# 2. Change env variables for your configuration.
#
# For more information on:
#   - GitHub Actions for Azure: https://github.com/Azure/Actions
#   - Azure Functions Action: https://github.com/Azure/functions-action
#   - Publish Profile: https://github.com/Azure/functions-action#using-publish-profile-as-deployment-credential-recommended
#   - Azure Service Principal for RBAC: https://github.com/Azure/functions-action#using-azure-service-principal-for-rbac-as-deployment-credential
#
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples/tree/master/FunctionApp

name: Deploy DotNet project to Azure Function App

on:
  push:
    branches: ["master"]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: 'Build'
      run: 'echo Hello, world from Build!'
  deploy-to-dev:
    runs-on: ubuntu-latest # For Linux, use ubuntu-latest
    needs: build
    environment: Development
    steps:
    - name: 'Checkout GitHub Action'
      run: 'echo Hello, world from Deploy Development!'
  deploy-to-staging:
    runs-on: ubuntu-latest # For Linux, use ubuntu-latest
    needs: deploy-to-dev
    environment: Staging
    steps:
    - name: 'Checkout GitHub Action'
      run: 'echo Hello, world from Deploy Staging!'
